services:
  # NATS JetStream Message Bus
  nats:
    image: nats:2.10-alpine
    container_name: aida-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    command:
      - "--jetstream"
      - "--store_dir=/data"
      - "--http_port=8222"
      - "--port=4222"
    volumes:
      - nats-data:/data
    networks:
      - aida-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aida-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aida_crm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - aida-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: aida-chroma
    ports:
      - "8001:8000"
    environment:
      CHROMA_SERVER_AUTH_PROVIDER: token
      CHROMA_SERVER_AUTH_TOKEN: ${CHROMA_AUTH_TOKEN}
    volumes:
      - chroma-data:/chroma/chroma
    networks:
      - aida-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 15s
      timeout: 10s
      retries: 5

  # AIDA Core API
  core:
    build:
      context: ./core
      dockerfile: Dockerfile
    container_name: aida-core
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-aida_crm}

      # NATS
      NATS_URL: nats://nats:4222

      # Vector DB
      CHROMA_URL: http://chroma:8000
      CHROMA_AUTH_TOKEN: ${CHROMA_AUTH_TOKEN}

      # AI Service
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENROUTER_BASE_URL: ${OPENROUTER_BASE_URL}
      OPENROUTER_MODEL: ${OPENROUTER_MODEL}

      # App Config
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECRET_KEY: ${SECRET_KEY}
    networks:
      - aida-net
    depends_on:
      - nats
      - postgres
      - chroma
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AIDA Edge API Gateway
  edge:
    build:
      context: ./edge
      dockerfile: Dockerfile
    container_name: aida-edge
    ports:
      - "8080:8000"
    environment:
      # Core API
      CORE_API_URL: http://core:8000

      # NATS
      NATS_URL: nats://nats:4222

      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}

      # App Config
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    networks:
      - aida-net
    depends_on:
      - core
      - nats
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # UI Dashboard
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: aida-ui
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-production}
    networks:
      - aida-net
    depends_on:
      - edge
    restart: unless-stopped

networks:
  aida-net:
    driver: bridge
    name: aida-network

volumes:
  nats-data:
    driver: local
  postgres-data:
    driver: local
  chroma-data:
    driver: local